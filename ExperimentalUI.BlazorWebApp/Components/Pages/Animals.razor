@page "/animals"
@using ExperimentalUI.BlazorWebApp.Components.Dialogs
@using ExperimentalUI.BlazorWebApp.Interfaces
@using ExperimentalUI.BlazorWebApp.Models.Options
@attribute [StreamRendering]
@inject IRestService<Animal,AnimalEndpointOptions> _restService
@inject IToastService _toastService
@inject IDialogService _dialogService
@rendermode InteractiveServer

<FluentGrid>
    <FluentGridItem xs="12">
        <FluentLabel Typo="Typography.HeroTitle">Animals</FluentLabel>
    </FluentGridItem>
    <FluentGridItem xs="12">
        <FluentSwitch @bind-Value=@_gridView CheckedMessage="Grid View" UncheckedMessage="Row View" />
    </FluentGridItem>
    <FluentGridItem xs="12">
        @if (_animals is null)
        {
            <FluentSkeleton Shape="SkeletonShape.Circle"></FluentSkeleton>
            <FluentSkeleton Shape="SkeletonShape.Rect"></FluentSkeleton>
            <FluentSkeleton Style="margin-top: 10px" Height="10px;"></FluentSkeleton>
            <FluentSkeleton Style="margin-top: 10px" Height="10px;"></FluentSkeleton>
            <FluentSkeleton Style="margin-top: 20px;margin-bottom: 10px;" Width="75px" Height="30px"></FluentSkeleton>
        }
        else
        {
            @if (_gridView)
            {
                //TODO - Use virtual so images are not rendered when not in view
                <FluentGrid>
                    <FluentStack Orientation="Orientation.Horizontal">
                        @foreach (var animal in _animals)
                        {
                            <FluentGridItem xs="3">
                                <FluentCard Width="10vw" Height="15vh" Style="display: flex; flex-direction: column; justify-content: space-between;">
                                    <!-- Image Container -->
                                    <div style="cursor: pointer; height: 90%; display: flex; align-items: center; justify-content: center;" @onclick="() => EnlargeAnimalThumbnail(animal)">
                                        @if (IsVideoMimeType(@animal.Thumbnail))
                                        {
                                            <FluentIcon Value="@(new Icons.Regular.Size24.MoviesAndTv())" />
                                        }
                                        else
                                        {
                                            <img src="@animal.Thumbnail"
                                                 alt="@animal.Description"
                                                 title="@animal.Description"
                                                 style="max-height: 100%; max-width: 100%; height: auto; width: auto; object-fit: cover;" />
                                        }
                                    </div>

                                    <!-- Footer Section -->
                                    <FluentStack Style="margin-top: 0.5vh; width: 100%;" HorizontalGap="0" Orientation="Orientation.Horizontal">
                                        <FluentLabel title="@animal.Name" Typo="Typography.Subject" Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis; flex: 1;">
                                            @animal.Name
                                        </FluentLabel>
                                        <FluentSpacer></FluentSpacer>
                                        <FluentButton Style="margin-top: -0.5vh;" Appearance="Appearance.Stealth" IconEnd="@(new Icons.Regular.Size16.Delete())"
                                                      OnClick="()=>DeleteAnimalAsync(animal.Id)" Loading="@_isDeletingAnimal" Title="Delete Animal" />
                                    </FluentStack>
                                </FluentCard>
                            </FluentGridItem>
                        }
                    </FluentStack>
                </FluentGrid>
            }

            else
            {
                <FluentGrid>
                    @foreach (var animal in _animals)
                    {
                        <FluentGridItem xs="12">
                            <FluentStack Style="width: 100%; height: 100%; display: flex; align-items: center;" HorizontalGap="0" Orientation="Orientation.Horizontal">
                                <div style="position: relative; width: 100%;">
                                    <FluentCard Width="100%" Height="100%" role="button"
                                                @onclick="()=>OpenAnimalEditorAsync(animal)"
                                                Style="display: flex; align-items: center; justify-content: center; padding: 1rem; box-sizing: border-box;">
                                        <FluentLabel title="@animal.Name" Typo="Typography.Subject"
                                                     Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis; flex: 1;">
                                            @animal.Name
                                        </FluentLabel>
                                    </FluentCard>
                                    <FluentButton Style="position: absolute; top: 50%; right: 0; transform: translateY(-50%); margin-left: 1rem;"
                                                  Appearance="Appearance.Stealth" IconEnd="@(new Icons.Regular.Size16.Delete())"
                                                  @onclick="()=>DeleteAnimalAsync(animal.Id)" Title="Delete Animal" />
                                </div>
                            </FluentStack>
                        </FluentGridItem>
                    }
                </FluentGrid>
            }
        }
    </FluentGridItem>
</FluentGrid>

@code {
    private IQueryable<Animal>? _animals;
    private bool _gridView;
    private bool _isDeletingAnimal = false;

    protected override async Task OnInitializedAsync()
    {
        _animals = (await _restService.GetAllAsync()).AsQueryable();
    }

    private async Task DeleteAnimalAsync(Guid id)
    {
        _isDeletingAnimal = true;
        _toastService.ShowInfo("Attempting to delete animal");
        var result = await _restService.DeleteAsync(id);
        if (result)
        {
            _toastService.ShowSuccess("Successfully deleted animal");
        }
        else
        {
            _toastService.ShowError("Failed to deleted animal");
        }
        _isDeletingAnimal = false;
    }

    private async Task EnlargeAnimalThumbnail(Animal animal)
    {
        DialogParameters parameters = new()
            {
                Width = "auto",
                Height = "80%",
                TrapFocus = true,
                Modal = true,
                PreventScroll = true,
            };

        IDialogReference dialog = await _dialogService.ShowDialogAsync<ThumbnailDialog>(animal.Thumbnail, parameters);
    }

    private async Task OpenAnimalEditorAsync(Animal animal)
    {
        DialogParameters parameters = new()
            {
                Width = "70vw",
                Height = "70vh",
                TrapFocus = true,
                Modal = true,
                PreventScroll = true,
            };

        IDialogReference dialog = await _dialogService.ShowDialogAsync<AnimalEditor>(animal, parameters);
    }

    private static bool IsVideoMimeType(string base64String)
    {
        var mimeType = base64String.Split(',')[0];
        // Remove the "data:" part
        mimeType = mimeType.Substring(5);
        mimeType = mimeType.Substring(0, mimeType.IndexOf(";base64"));

        // Check against known video MIME types
        var videoMimeTypes = new[] {
            "video/mp4",
            "video/webm",
            "video/ogg",
            "video/avi",
            "video/mkv",
            // Add more video MIME types as needed
        };

        return Array.Exists(videoMimeTypes, type => type.Equals(mimeType, StringComparison.OrdinalIgnoreCase));
    }
}